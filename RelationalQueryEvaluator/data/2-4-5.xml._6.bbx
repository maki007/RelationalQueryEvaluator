operator main()->()
{
broadcast()->(){6} start;
TableScan()->(int,int) TableScan0(name="region",columns="r_regionkey,r_name"); 
Filter(int,int)->(int,int) Filter1(condition="OP_EQUALS(1,OP_string_CONSTANT(Africa))"); 
TableScan()->(int,int,string) TableScan2(name="nation",columns="n_nationkey,n_regionkey,n_name"); 
HashJoin(int,int)(int,int,string)->(int,int,string,int,int) HashJoin3(left="3,4",right="0,1,2",out="0,1,2,3,4",leftPartOfCondition="3",rightPartOfCondition="1"); 
TableScan()->(int,int) TableScan4(name="supplier",columns="s_suppkey,s_nationkey"); 
HashJoin(int,int,string,int,int)(int,int)->(int,int,int,int,string,int,int) HashJoin5(left="2,3,4,5,6",right="0,1",out="0,1,2,3,4,5,6",leftPartOfCondition="1",rightPartOfCondition="2"); 
TableScan()->(int,int,int,int) TableScan6(name="lineitem",columns="l_orderkey,l_suppkey,l_extendedprice,l_discount"); 
HashJoin(int,int,int,int,string,int,int)(int,int,int,int)->(int,int,int,int,int,int,int,int,string,int,int) HashJoin7(left="4,5,6,7,8,9,10",right="0,1,2,3",out="0,1,2,3,4,5,6,7,8,9,10",leftPartOfCondition="1",rightPartOfCondition="4"); 
TableScan()->(int,int) TableScan8(name="customer",columns="c_custkey,c_nationkey"); 
HashJoin(int,int,int,int,int,int,int,int,string,int,int)(int,int)->(int,int,int,int,int,int,int,int,int,int,string,int,int) HashJoin9(left="2,3,4,5,6,7,8,9,10,11,12",right="0,1",out="0,1,2,3,4,5,6,7,8,9,10,11,12",leftPartOfCondition="1",rightPartOfCondition="7"); 
TableScan()->(int,int,date) TableScan10(name="orders",columns="o_custkey,o_orderkey,o_orderdate"); 
Filter(int,int,date)->(int,int,date) Filter11(condition="OP_AND(OP_LOWER_OR_EQUAL(OP_date_CONSTANT(20-11-2013),2),OP_LOWER(2,OP_date_CONSTANT(20-11-2014)))"); 
HashJoin(int,int,int,int,int,int,int,int,int,int,string,int,int)(int,int,date)->(int,int,int,int,date,int,int,int,int,int,int,int,int,string,int,int) HashJoin12(left="0,1,5,6,7,8,9,10,11,12,13,14,15",right="2,3,4",out="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",leftPartOfCondition="0,3",rightPartOfCondition="2,5"); 
ColumnsOperations(int,int,int,int,date,int,int,int,int,int,int,int,int,string,int,int)->(string,double) ColumnsOperations13(out="13,OP_TIMES(7,OP_MINUS(OP_double_CONSTANT(1),8))"); 
SortOperator(string,double)->(string,double) SortOperator14(sortedBy="",sortBy="0:A"); 
SortedGroup(string,double)->(string,double) SortedGroup15(groupBy="0",functions="sum(1)"); 
SortOperator(string,double)->(string,double) SortOperator16(sortedBy="",sortBy="1:D"); 
Store(string,double)->() storeResult(); 

source -> start
start[0] -> TableScan0;
TableScan0 -> Filter1;
start[1] -> TableScan2;
Filter1 -> [0]HashJoin3;
TableScan2 -> [1]HashJoin3;
start[2] -> TableScan4;
HashJoin3 -> [0]HashJoin5;
TableScan4 -> [1]HashJoin5;
start[3] -> TableScan6;
HashJoin5 -> [0]HashJoin7;
TableScan6 -> [1]HashJoin7;
start[4] -> TableScan8;
HashJoin7 -> [0]HashJoin9;
TableScan8 -> [1]HashJoin9;
start[5] -> TableScan10;
TableScan10 -> Filter11;
HashJoin9 -> [0]HashJoin12;
Filter11 -> [1]HashJoin12;
HashJoin12 -> ColumnsOperations13;
ColumnsOperations13 -> SortOperator14;
SortOperator14 -> SortedGroup15;
SortedGroup15 -> SortOperator16;
SortOperator16 -> storeResult;
storeResult -> output;
}