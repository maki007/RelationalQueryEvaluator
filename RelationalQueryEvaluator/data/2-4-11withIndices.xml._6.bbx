operator main()->()
{
broadcast()->(){6} start;
ScanAndSortByIndexScan()->(int,int,int) ScanAndSortByIndexScan0(name="partsup",index="partsup index",columns="ps_suppkey,ps_supplycost,ps_availqty"); 
ScanAndSortByIndexScan()->(int,int) ScanAndSortByIndexScan1(name="supplier",index="supplier index secondary",columns="s_nationkey,s_suppkey"); 
TableScan()->(int,string) TableScan2(name="nation",columns="n_nationkey,n_name"); 
Filter(int,string)->(int,string) Filter3(condition="OP_EQUALS(1,OP_string_CONSTANT(Slovakia))"); 
SortOperator(int,string)->(int,string) SortOperator4(sortedBy="",sortBy="0:A"); 
MergeEquiJoin(int,int)(int,string)->(int,int,int,string) MergeEquiJoin5(left="0,1",right="2,3",out="0,1,2,3",leftPartOfCondition="0:A",rightPartOfCondition="2:A"); 
SortOperator(int,int,int,string)->(int,int,int,string) SortOperator6(sortedBy="",sortBy="1:A"); 
MergeEquiJoin(int,int,int)(int,int,int,string)->(int,int,int,int,int,int,string) MergeEquiJoin7(left="0,1,2",right="3,4,5,6",out="0,1,2,3,4,5,6",leftPartOfCondition="0:A",rightPartOfCondition="4:A"); 
ColumnsOperations(int,int,int,int,int,int,string)->(double) ColumnsOperations8(out="OP_TIMES(1,2)"); 
SortedGroup(double)->(double) SortedGroup9(groupBy="",functions="sum(0)"); 
ColumnsOperations(double)->(double) ColumnsOperations10(out="OP_TIMES(0,OP_double_CONSTANT(0.7))"); 
ScanAndSortByIndexScan()->(int,int,int,int) ScanAndSortByIndexScan11(name="partsup",index="partsup index",columns="ps_suppkey,ps_partkey,ps_supplycost,ps_availqty"); 
ScanAndSortByIndexScan()->(int,int) ScanAndSortByIndexScan12(name="supplier",index="supplier index secondary",columns="s_nationkey,s_suppkey"); 
TableScan()->(int,string) TableScan13(name="nation",columns="n_nationkey,n_name"); 
Filter(int,string)->(int,string) Filter14(condition="OP_EQUALS(1,OP_string_CONSTANT(Slovakia))"); 
SortOperator(int,string)->(int,string) SortOperator15(sortedBy="",sortBy="0:A"); 
MergeEquiJoin(int,int)(int,string)->(int,int,int,string) MergeEquiJoin16(left="0,1",right="2,3",out="0,1,2,3",leftPartOfCondition="0:A",rightPartOfCondition="2:A"); 
SortOperator(int,int,int,string)->(int,int,int,string) SortOperator17(sortedBy="",sortBy="1:A"); 
MergeEquiJoin(int,int,int,int)(int,int,int,string)->(int,int,int,int,int,int,int,string) MergeEquiJoin18(left="0,1,2,3",right="4,5,6,7",out="0,1,2,3,4,5,6,7",leftPartOfCondition="0:A",rightPartOfCondition="5:A"); 
ColumnsOperations(int,int,int,int,int,int,int,string)->(int,double) ColumnsOperations19(out="1,OP_TIMES(2,3)"); 
HashGroup(int,double)->(int,double) HashGroup20(groupBy="0",functions="sum(1)"); 
CrossJoin(double)(int,double)->(double,int,double) CrossJoin21(left="0",right="1,2",out="0,1,2"); 
Filter(double,int,double)->(double,int,double) Filter22(condition="OP_LOWER(0,2)"); 
ColumnsOperations(double,int,double)->(int,double) ColumnsOperations23(out="1,2"); 
SortOperator(int,double)->(int,double) SortOperator24(sortedBy="",sortBy="1:D"); 
Store(int,double)->() storeResult(); 

input -> start
start[0] -> ScanAndSortByIndexScan0;
start[1] -> ScanAndSortByIndexScan1;
start[2] -> TableScan2;
TableScan2 -> Filter3;
Filter3 -> SortOperator4;
ScanAndSortByIndexScan1 -> [0]MergeEquiJoin5;
SortOperator4 -> [1]MergeEquiJoin5;
MergeEquiJoin5 -> SortOperator6;
ScanAndSortByIndexScan0 -> [0]MergeEquiJoin7;
SortOperator6 -> [1]MergeEquiJoin7;
MergeEquiJoin7 -> ColumnsOperations8;
ColumnsOperations8 -> SortedGroup9;
SortedGroup9 -> ColumnsOperations10;
start[3] -> ScanAndSortByIndexScan11;
start[4] -> ScanAndSortByIndexScan12;
start[5] -> TableScan13;
TableScan13 -> Filter14;
Filter14 -> SortOperator15;
ScanAndSortByIndexScan12 -> [0]MergeEquiJoin16;
SortOperator15 -> [1]MergeEquiJoin16;
MergeEquiJoin16 -> SortOperator17;
ScanAndSortByIndexScan11 -> [0]MergeEquiJoin18;
SortOperator17 -> [1]MergeEquiJoin18;
MergeEquiJoin18 -> ColumnsOperations19;
ColumnsOperations19 -> HashGroup20;
ColumnsOperations10 -> [0]CrossJoin21;
HashGroup20 -> [1]CrossJoin21;
CrossJoin21 -> Filter22;
Filter22 -> ColumnsOperations23;
ColumnsOperations23 -> SortOperator24;
SortOperator24 -> storeResult;
storeResult -> output;
}