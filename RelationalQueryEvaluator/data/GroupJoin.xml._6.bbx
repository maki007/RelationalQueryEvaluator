operator main()->()
{
bobox::broadcast()->(),(),(),() start;
TableScan()->(int) TableScan0(name="a",columns="a"); 
SortOperator(int)->(int) SortOperator1(sortedBy="",sortBy="0:A"); 
TableScan()->(int) TableScan2(name="b",columns="b"); 
SortOperator(int)->(int) SortOperator3(sortedBy="",sortBy="0:A"); 
MergeEquiJoin(int),(int)->(int,int) MergeEquiJoin4(left="0",right="1",out="0,1",leftPartOfCondition="0:A",rightPartOfCondition="1:A"); 
TableScan()->(int) TableScan5(name="c",columns="c"); 
SortOperator(int)->(int) SortOperator6(sortedBy="",sortBy="0:A"); 
TableScan()->(int) TableScan7(name="d",columns="d"); 
SortOperator(int)->(int) SortOperator8(sortedBy="",sortBy="0:A"); 
MergeEquiJoin(int),(int)->(int,int) MergeEquiJoin9(left="0",right="1",out="0,1",leftPartOfCondition="0:A",rightPartOfCondition="1:A"); 
MergeEquiJoin(int,int),(int,int)->(int,int,int,int) MergeEquiJoin10(left="0,1",right="2,3",out="0,1,2,3",leftPartOfCondition="0:A",rightPartOfCondition="2:A"); 
Store(int,int,int,int)->() storeResult(); 

input -> start;
start[0] -> TableScan0;
TableScan0 -> SortOperator1;
start[1] -> TableScan2;
TableScan2 -> SortOperator3;
SortOperator1 -> [0]MergeEquiJoin4;
SortOperator3 -> [1]MergeEquiJoin4;
start[2] -> TableScan5;
TableScan5 -> SortOperator6;
start[3] -> TableScan7;
TableScan7 -> SortOperator8;
SortOperator6 -> [0]MergeEquiJoin9;
SortOperator8 -> [1]MergeEquiJoin9;
MergeEquiJoin4 -> [0]MergeEquiJoin10;
MergeEquiJoin9 -> [1]MergeEquiJoin10;
MergeEquiJoin10 -> storeResult;
storeResult -> output;
}